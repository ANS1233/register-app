pipeline {
    agent { label 'Jenkins-Agent' }
    tools {
        jdk 'Java17'
        maven 'Maven3'
    }
environment {
	    APP_NAME = "register-app-pipeline"
            RELEASE = "1.0.0"
            DOCKER_USER = "rokaya123"
            DOCKER_TOKEN = "dckr_pat_Mh-vPwxhLAW4Js5aktN6EESo6SY"
            IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
            IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"    
    }
stages {
      

        stage("Checkout from SCM"){
                steps {
                    git branch: 'main', credentialsId: 'github', url: 'https://github.com/ANS1233/register-app'
                }
        }

        stage("Build Application"){
            steps {
                sh "mvn clean package"
            }

       }

       stage("Test Application"){
           steps {
                 sh "mvn test"
           }
       }
stage("SonarQube Analysis"){
           steps {
	           script {
		        withSonarQubeEnv(credentialsId: 'jenekins-sonarqube-token') { 
                        sh "mvn sonar:sonar"
		        }
	           }	
           }
       }
stage("Quality Gate"){
           steps {
               script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins-sonarqube-token'
                }	
            }

        
       }

stage("Docker Login") {
            steps {
                script {
                    // Using echo to simulate input to the docker login command
                    
                    // Running the docker login command
                    sh "echo ${DOCKER_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin"
                }
            }
        }

stage("Build & Push Docker Image") {
    steps {
        script {
            withCredentials([string(credentialsId: 'jenkins-dockerhub-access-token', variable: 'DOCKER_TOKEN')]) {
                docker.withRegistry('https://index.docker.io/v1/', 'jenkins-dockerhub-access-token') {
                    docker_image = docker.build "${IMAGE_NAME}"
                    docker_image.push("${IMAGE_TAG}")
                    docker_image.push('latest')
                }
            }
        }
    }
}

      
      } 

} 



  

